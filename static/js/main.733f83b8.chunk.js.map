{"version":3,"sources":["components/Emoji/index.js","components/Phone/index.js","App.js","index.js"],"names":["Emoji","props","className","id","onClick","handleImgClick","alt","name","src","image","Phone","this","highScore","date","Date","now","renderer","seconds","completed","emojis","length","map","emoji","width","Component","App","state","count","phoneEmojis","handleClick","doubleClicked","update","forEach","clicked","alert","setState","concat","sort","Math","random","key","ReactDOM","render","document","getElementById"],"mappings":"qTASeA,G,MAND,SAAAC,GAAK,OACjB,yBAAKC,UAAU,gBAAgBC,GAAIF,EAAME,GAAIC,QAASH,EAAMI,gBAC1D,yBAAKH,UAAU,QAAQI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,eCsCxCC,G,uLAvCH,IAAD,OAuBP,OACE,yBAAKR,UAAU,+BACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,cAAf,eAAyCS,KAAKV,MAAMW,WACpD,yBAAKV,UAAU,aACb,kBAAC,IAAD,CAAWW,KAAMC,KAAKC,MAAQ,IAAOC,SA3BhC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,SAAYC,UACX,2CAAyB,mCAASD,OA4B1C,6BACA,yBAAKf,UAAU,iBAAf,uBACA,mBA5BS,WACb,OAAI,EAAKD,MAAMkB,OAAOC,OAElB,yBAAKlB,UAAU,uBACZ,EAAKD,MAAMkB,OAAOE,KAAI,SAAAC,GAAK,OAC1B,yBACEd,IAAKc,EAAMb,MACXH,IAAKgB,EAAMf,KACXJ,GAAImB,EAAMnB,GACVoB,MAAM,aAMP,gCAaL,Y,GAjCUC,cCwGLC,G,iNApGbC,MAAQ,CACNP,SACAQ,MAAO,EACPf,UAAW,EACXgB,YAAa,I,EAIfC,YAAc,SAAA1B,GACZ,IAAI2B,GAAgB,EAGhBC,EAAS,CACXZ,OAAO,YAAK,EAAKO,MAAMP,QACvBQ,MAAO,EAAKD,MAAMC,MAClBf,UAAW,EAAKc,MAAMd,WAGxBmB,EAAOZ,OAAOa,SAAQ,SAAAV,GAChBA,EAAMnB,KAAOA,IACXmB,EAAMW,UACRH,GAAgB,EAChBI,MAAM,iCAERZ,EAAMW,SAAU,EAChBF,EAAOJ,QACHI,EAAOJ,MAAQI,EAAOnB,YACxBmB,EAAOnB,UAAYmB,EAAOJ,OAE5B,EAAKQ,SAAS,CACZP,YAAa,EAAKF,MAAME,YAAYQ,OAAO,CACzC3B,MAAOa,EAAMb,MACbF,KAAMe,EAAMf,KACZJ,GAAImB,EAAMnB,WAOd2B,IACFC,EAAOZ,OAAOa,SAAQ,SAAAV,GAAK,OAAKA,EAAMW,SAAU,KAChDF,EAAOJ,MAAQ,EACf,EAAKQ,SAAS,CACZP,YAAa,OAKbG,EAAOJ,OAAWI,EAAOJ,MAAQI,EAAOZ,OAAOC,QACjDW,EAAOZ,OAAOa,SAAQ,SAAAV,GAAK,OAAKA,EAAMW,SAAU,KAIlDF,EAAOZ,OAASY,EAAOZ,OAAOkB,MAAK,iBAAM,GAAMC,KAAKC,YAGpD,EAAKJ,SAAS,CACZhB,OAAQY,EAAOZ,OACfQ,MAAOI,EAAOJ,MACdf,UAAWmB,EAAOnB,a,wEAIZ,IAAD,OACP,OACE,oCACE,wBAAIV,UAAU,SAAd,cACA,wBAAIA,UAAU,aAAd,mGAIA,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEU,UAAWD,KAAKe,MAAMd,UACtBO,OAAQR,KAAKe,MAAME,eAOvB,yBAAK1B,UAAU,mBACZS,KAAKe,MAAMP,OAAOE,KAAI,SAAAC,GAAK,OAC1B,yBAAKpB,UAAU,YAAYsC,IAAKlB,EAAMnB,IACpC,kBAAC,EAAD,CACEA,GAAImB,EAAMnB,GACVqC,IAAKlB,EAAMnB,GACXI,KAAMe,EAAMf,KACZE,MAAOa,EAAMb,MACbJ,eAAgB,kBAAM,EAAKwB,YAAYP,EAAMnB,iB,GA3F3CqB,c,MCDlBiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.733f83b8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Emoji = props => (\n  <div className=\"img-container\" id={props.id} onClick={props.handleImgClick}>\n    <img className=\"emoji\" alt={props.name} src={props.image} />\n  </div>\n);\n\nexport default Emoji;\n","import React, { Component } from \"react\";\nimport Countdown from \"react-countdown-now\";\nimport \"./style.css\";\nclass Phone extends Component {\n  render() {\n    const time = ({ seconds, completed }) =>\n      completed ? <span>Times Up!</span> : <span>0:{seconds}</span>;\n\n    const Emojis = () => {\n      if (this.props.emojis.length) {\n        return (\n          <div className=\"reply-speech-bubble\">\n            {this.props.emojis.map(emoji => (\n              <img\n                src={emoji.image}\n                alt={emoji.name}\n                id={emoji.id}\n                width=\"30px\"\n              />\n            ))}\n          </div>\n        );\n      } else {\n        return <div></div>;\n      }\n    };\n\n    return (\n      <div className=\"card text-center smartphone\">\n        <div className=\"content\">\n          <div className=\"high-score\">High Score: {this.props.highScore}</div>\n          <div className=\"countdown\">\n            <Countdown date={Date.now() + 30000} renderer={time} />\n          </div>\n          <br />\n          <div className=\"speech-bubble\">Hi! How's it going?</div>\n          <Emojis />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Phone;\n","import React, { Component } from \"react\";\nimport Emoji from \"./components/Emoji\";\nimport emojis from \"./emoji.json\";\nimport Phone from \"./components/Phone\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    emojis,\n    count: 0,\n    highScore: 0,\n    phoneEmojis: []\n  };\n\n  //Emoji onClick event\n  handleClick = id => {\n    let doubleClicked = false;\n\n    // a state snapshot to minimize state updates\n    let update = {\n      emojis: [...this.state.emojis],\n      count: this.state.count,\n      highScore: this.state.highScore\n    };\n\n    update.emojis.forEach(emoji => {\n      if (emoji.id === id) {\n        if (emoji.clicked) {\n          doubleClicked = true;\n          alert(\"You already used that emoji!\");\n        }\n        emoji.clicked = true;\n        update.count++;\n        if (update.count > update.highScore) {\n          update.highScore = update.count;\n        }\n        this.setState({\n          phoneEmojis: this.state.phoneEmojis.concat({\n            image: emoji.image,\n            name: emoji.name,\n            id: emoji.id\n          })\n        });\n      }\n    });\n\n    // reset score and clicked state in all cards if a card was clicked twice\n    if (doubleClicked) {\n      update.emojis.forEach(emoji => (emoji.clicked = false));\n      update.count = 0;\n      this.setState({\n        phoneEmojis: []\n      });\n    }\n\n    // reset clicked in cards if all cards where clicked once\n    if (update.count && !(update.count % update.emojis.length)) {\n      update.emojis.forEach(emoji => (emoji.clicked = false));\n    }\n\n    // randomize emojis\n    update.emojis = update.emojis.sort(() => 0.5 - Math.random());\n\n    // update state\n    this.setState({\n      emojis: update.emojis,\n      count: update.count,\n      highScore: update.highScore\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <h1 className=\"title\">Emoji Game</h1>\n        <h2 className=\"sub-title\">\n          You have 30 seconds to reply! Use as many emojis as you can without\n          using the same emoji twice!\n        </h2>\n        <div className=\"phone-container\">\n          <Phone\n            highScore={this.state.highScore}\n            emojis={this.state.phoneEmojis}\n            // won={\n            //   this.state.count &&\n            //   !(this.state.count % this.state.emojis.length)\n            // }\n          />\n        </div>\n        <div className=\"emoji-container\">\n          {this.state.emojis.map(emoji => (\n            <div className=\"emoji-btn\" key={emoji.id}>\n              <Emoji\n                id={emoji.id}\n                key={emoji.id}\n                name={emoji.name}\n                image={emoji.image}\n                handleImgClick={() => this.handleClick(emoji.id)}\n              />\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}