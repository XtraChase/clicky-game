{"version":3,"sources":["components/Emoji/index.js","components/Phone/index.js","App.js","index.js"],"names":["Emoji","props","className","id","onClick","handleImgClick","alt","name","src","image","Phone","Completionist","this","highScore","date","Date","now","renderer","seconds","completed","console","log","Component","App","state","emojis","count","handleClick","doubleClicked","update","forEach","emoji","clicked","alert","length","sort","Math","random","setState","map","key","ReactDOM","render","document","getElementById"],"mappings":"qTASeA,G,MAND,SAAAC,GAAK,OACjB,yBAAKC,UAAU,gBAAgBC,GAAIF,EAAME,GAAIC,QAASH,EAAMI,gBAC1D,yBAAKH,UAAU,QAAQI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,eCkCxCC,G,kBAnCb,WAAYT,GAAQ,qEACZA,I,sEAIN,IAAMU,EAAgB,kBAAM,4CAc5B,OACE,yBAAKT,UAAU,+BACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,cAAf,eAAyCU,KAAKX,MAAMY,WACpD,yBAAKX,UAAU,aACb,kBAAC,IAAD,CAAWY,KAAMC,KAAKC,MAAQ,IAAOC,SAjB5B,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC3B,OAAIA,GACFC,QAAQC,IAAIF,GAEL,kBAACR,EAAD,QAEPS,QAAQC,IAAIF,GAEL,mCAASD,QAWd,6BACA,yBAAKhB,UAAU,iBAAf,6B,GA5BUoB,cC+FLC,G,iNA3FbC,MAAQ,CACNC,SACAC,MAAO,EACPb,UAAW,G,EAIbc,YAAc,SAAAxB,GACZ,IAAIyB,GAAgB,EAGhBC,EAAS,CACXJ,OAAO,YAAK,EAAKD,MAAMC,QACvBC,MAAO,EAAKF,MAAME,MAClBb,UAAW,EAAKW,MAAMX,WAGxBgB,EAAOJ,OAAOK,SAAQ,SAAAC,GAChBA,EAAM5B,KAAOA,IACX4B,EAAMC,SACRJ,GAAgB,EAChBK,MAAM,iCAENb,QAAQC,IAAI,oBAEdU,EAAMC,SAAU,EAChBH,EAAOH,QACHG,EAAOH,MAAQG,EAAOhB,YACxBgB,EAAOhB,UAAYgB,EAAOH,WAM5BE,IACFC,EAAOJ,OAAOK,SAAQ,SAAAC,GAAK,OAAKA,EAAMC,SAAU,KAChDH,EAAOH,MAAQ,IAIbG,EAAOH,OAAWG,EAAOH,MAAQG,EAAOJ,OAAOS,QACjDL,EAAOJ,OAAOK,SAAQ,SAAAC,GAAK,OAAKA,EAAMC,SAAU,KAIlDH,EAAOJ,OAASI,EAAOJ,OAAOU,MAAK,iBAAM,GAAMC,KAAKC,YAGpD,EAAKC,SAAS,CACZb,OAAQI,EAAOJ,OACfC,MAAOG,EAAOH,MACdb,UAAWgB,EAAOhB,a,wEAIZ,IAAD,OACP,OACE,oCACE,wBAAIX,UAAU,SAAd,cACA,wBAAIA,UAAU,aAAd,mGAFF,IAOE,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEW,UAAWD,KAAKY,MAAMX,aAO1B,yBAAKX,UAAU,mBACZU,KAAKY,MAAMC,OAAOc,KAAI,SAAAR,GAAK,OAC1B,yBAAK7B,UAAU,aACb,kBAAC,EAAD,CACEC,GAAI4B,EAAM5B,GACVqC,IAAKT,EAAM5B,GACXI,KAAMwB,EAAMxB,KACZE,MAAOsB,EAAMtB,MACbJ,eAAgB,kBAAM,EAAKsB,YAAYI,EAAM5B,iB,GAlF3CmB,c,MCDlBmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7d482605.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Emoji = props => (\n  <div className=\"img-container\" id={props.id} onClick={props.handleImgClick}>\n    <img className=\"emoji\" alt={props.name} src={props.image} />\n  </div>\n);\n\nexport default Emoji;\n","import React, { Component } from \"react\";\nimport Countdown from \"react-countdown-now\";\nimport \"./style.css\";\nclass Phone extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const Completionist = () => <span>Times Up!</span>;\n\n    const renderer = ({ seconds, completed }) => {\n      if (completed) {\n        console.log(completed);\n        // Render a completed state\n        return <Completionist />;\n      } else {\n        console.log(completed);\n        // Render a countdown\n        return <span>0:{seconds}</span>;\n      }\n    };\n\n    return (\n      <div className=\"card text-center smartphone\">\n        <div className=\"content\">\n          <div className=\"high-score\">High Score: {this.props.highScore}</div>\n          <div className=\"countdown\">\n            <Countdown date={Date.now() + 30000} renderer={renderer} />\n          </div>\n          <br />\n          <div className=\"speech-bubble\">Hi! How's it going?</div>\n          {/* <div className=\"reply-speech-bubble\">...</div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Phone;\n","import React, { Component } from \"react\";\nimport Emoji from \"./components/Emoji\";\nimport emojis from \"./emoji.json\";\nimport Phone from \"./components/Phone\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    emojis,\n    count: 0,\n    highScore: 0\n  };\n\n  //Emoji onClick event\n  handleClick = id => {\n    let doubleClicked = false;\n\n    // a state snapshot to minimize state updates\n    let update = {\n      emojis: [...this.state.emojis],\n      count: this.state.count,\n      highScore: this.state.highScore\n    };\n\n    update.emojis.forEach(emoji => {\n      if (emoji.id === id) {\n        if (emoji.clicked) {\n          doubleClicked = true;\n          alert(\"You already used that emoji!\");\n        } else {\n          console.log(\"Clicked on emoji\");\n        }\n        emoji.clicked = true;\n        update.count++;\n        if (update.count > update.highScore) {\n          update.highScore = update.count;\n        }\n      }\n    });\n\n    // reset score and clicked state in all cards if a card was clicked twice\n    if (doubleClicked) {\n      update.emojis.forEach(emoji => (emoji.clicked = false));\n      update.count = 0;\n    }\n\n    // reset clicked in cards if all cards where clicked once\n    if (update.count && !(update.count % update.emojis.length)) {\n      update.emojis.forEach(emoji => (emoji.clicked = false));\n    }\n\n    // randomize emojis\n    update.emojis = update.emojis.sort(() => 0.5 - Math.random());\n\n    // update state\n    this.setState({\n      emojis: update.emojis,\n      count: update.count,\n      highScore: update.highScore\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <h1 className=\"title\">Emoji Game</h1>\n        <h2 className=\"sub-title\">\n          You have 30 seconds to reply! Use as many emojis as you can without\n          using the same emoji twice!\n        </h2>\n        ;\n        <div className=\"phone-container\">\n          <Phone\n            highScore={this.state.highScore}\n            // won={\n            //   this.state.count &&\n            //   !(this.state.count % this.state.emojis.length)\n            // }\n          />\n        </div>\n        <div className=\"emoji-container\">\n          {this.state.emojis.map(emoji => (\n            <div className=\"emoji-btn\">\n              <Emoji\n                id={emoji.id}\n                key={emoji.id}\n                name={emoji.name}\n                image={emoji.image}\n                handleImgClick={() => this.handleClick(emoji.id)}\n              />\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}