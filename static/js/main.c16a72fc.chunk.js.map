{"version":3,"sources":["components/Emojis/index.js","components/Wrapper/index.js","components/Title/index.js","components/CardBody.js","components/Phone.js","App.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","Wrapper","children","Title","CardBody","count","Phone","state","handleIncrement","setState","this","React","Component","App","emoji","map","Emojis","id","key","onClick","removeEmoji","ReactDOM","render","document","getElementById"],"mappings":"47ZAWeA,MARf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,QAAQC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,U,MCC1CC,MAJf,SAAiBN,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMO,W,MCDzC,SAASC,EAAMR,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMO,UCevBE,MAdf,SAAkBT,GAChB,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,aAAb,UAAiCD,EAAMU,SCwB9BC,G,iNAxBbC,MAAQ,CACNF,MAAO,G,EAITG,gBAAkB,WAEhB,EAAKC,SAAS,CAAEJ,MAAO,EAAKE,MAAMF,MAAQ,K,wEAK1C,OACE,yBAAKT,UAAU,+BACb,kBAAC,EAAD,CACEA,UAAU,UACVS,MAAOK,KAAKH,MAAMF,MAClBG,gBAAiBE,KAAKF,uB,GApBZG,IAAMC,Y,OCqDXC,G,iNAhDbN,MAAQ,CACNO,QACAT,MAAO,G,EAWTG,gBAAkB,WAEhB,EAAKC,SAAS,CAAEJ,MAAO,EAAKE,MAAMF,MAAQ,K,wEAIlC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAACF,EAAD,mBACA,uGAGA,kBAAC,EAAD,MAIA,yBAAKP,UAAU,mBACZc,KAAKH,MAAMO,MAAMC,KAAI,SAAAD,GAAK,OACzB,kBAACE,EAAD,CAEEC,GAAIH,EAAMG,GACVC,IAAKJ,EAAMG,GACXnB,KAAMgB,EAAMhB,KACZE,MAAOc,EAAMd,MACbQ,gBAAiB,EAAKA,gBACtBW,SAAU,EAAKX,gBAAiB,EAAKY,wB,GAzCjCR,c,MCHlBS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c16a72fc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"img-container\">\n      <img className=\"emoji\" alt={props.name} src={props.image} />\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nfunction subTitle(props) {\n  return <h2 className=\"sub-title\">{props.children}</h2>;\n}\n\nexport { Title, subTitle };\n","import React from \"react\";\r\n\r\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\r\n// Then bind the method to the parent, and pass it to the child as a prop\r\n\r\nfunction CardBody(props) {\r\n  return (\r\n    <div className=\"card-body\">\r\n      <p className=\"card-text\">Count: {props.count}</p>\r\n      {/* <button className=\"btn btn-primary\" onClick={props.handleIncrement}>\r\n        Increment\r\n      </button>{\" \"}\r\n      <button className=\"btn btn-danger\" onClick={props.handleDecrement}>\r\n        Decrement\r\n      </button> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardBody;\r\n","import React from \"react\";\nimport CardBody from \"./CardBody\";\nimport \"./Phone.css\";\n\n// By extending the React.Component class, Phoneinherits functionality from it\nclass Phone extends React.Component {\n  // Setting the initial state of the Phone\n  component;\n  state = {\n    count: 0\n  };\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className=\"card text-center smartphone\">\n        <CardBody\n          className=\"content\"\n          count={this.state.count}\n          handleIncrement={this.handleIncrement}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Phone;\n","import React, { Component } from \"react\";\nimport Emojis from \"./components/Emojis\";\nimport Wrapper from \"./components/Wrapper\";\nimport { Title, subTitle } from \"./components/Title\";\nimport Phone from \"./components/Phone\";\nimport emoji from \"./emoji.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.emoji to the emoji json array\n  state = {\n    emoji,\n    count: 0\n  };\n\n  // removeEmoji = id => {\n  //   // Filter this.state.emoji for emoji with an id not equal to the id being removed\n  //   const emoji = this.state.emoji.filter(emoji => emoji.id !== id);\n  //   // Set this.state.emoji equal to the new emoji array\n  //   this.setState({ emoji });\n  // };\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  // Map over this.state.emoji and render a Emojis component for each emoji object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Emoji Game</Title>\n        <subTitle>\n          Use as many emojis as you can without using the same emoji twice!\n        </subTitle>\n        <Phone />\n        {/* <div className=\"card-body\">\n          <p className=\"card-text\">Count: {this.count}</p>\n        </div> */}\n        <div className=\"emoji-container\">\n          {this.state.emoji.map(emoji => (\n            <Emojis\n              // removeemoji={this.removeEmoji}\n              id={emoji.id}\n              key={emoji.id}\n              name={emoji.name}\n              image={emoji.image}\n              handleIncrement={this.handleIncrement}\n              onClick={(this.handleIncrement, this.removeEmoji)}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}