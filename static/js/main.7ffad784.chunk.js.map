{"version":3,"sources":["components/Emojis/index.js","components/Wrapper/index.js","components/Title/index.js","components/SubTitle/index.js","components/Phone/index.js","App.js","index.js"],"names":["Emojis","props","className","alt","name","src","image","Wrapper","children","Title","SubTitle","Completionist","renderer","seconds","completed","Phone","state","count","clicked","this","date","Date","now","React","Component","App","emoji","addToUsedEmojis","id","filter","setState","shuffleEmojis","i","length","j","Math","floor","random","temp","handleIncrement","bind","console","log","map","key","onClick","ReactDOM","render","document","getElementById"],"mappings":"69ZAWeA,MARf,SAAgBC,GACd,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,QAAQC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,U,cCC1CC,MAJf,SAAiBN,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMO,W,MCG1BC,MAJf,SAAeR,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMO,W,MCGvBE,MAJf,SAAkBT,GAChB,OAAO,wBAAIC,UAAU,aAAaD,EAAMO,W,QCApCG,G,MAAgB,kBAAM,6CAEtBC,EAAW,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QAClB,OAD2C,EAAhBC,UAGlB,kBAAC,EAAD,MAGA,mCAASD,IA+BLE,E,2MAvBbC,MAAQ,CACNC,MAAO,EACPC,SAAS,G,wEAKT,OACE,yBAAKhB,UAAU,+BACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,cAAf,eAAyCiB,KAAKH,MAAMC,OACpD,yBAAKf,UAAU,aACb,kBAAC,IAAD,CAAWkB,KAAMC,KAAKC,MAAQ,IAAOV,SAAUA,KAEjD,6BACA,yBAAKV,UAAU,iBAAf,6B,GAlBUqB,IAAMC,WC8DXC,G,kBA5Cb,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAzBRe,MAAQ,CACNU,QACAT,MAAO,EACPC,SAAS,GAqBQ,EAlBnBS,gBAAkB,SAAAC,GAEhB,IAAMF,EAAQ,EAAKV,MAAMU,MAAMG,QAAO,SAAAH,GAAK,OAAIA,EAAME,KAAOA,KAE5D,EAAKE,SAAS,CAAEJ,WAcC,EAXnBK,cAAgB,SAAAL,GAEd,IADA,IAAIM,EAAIN,EAAMO,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOZ,EAAMM,GACnBN,EAAMM,GAAKN,EAAMQ,GACjBR,EAAMQ,GAAKI,EAEb,OAAOZ,GAKP,EAAKa,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAFN,E,+EAMA,IAAD,OAChBC,QAAQC,IAAI,SAEZvB,KAAKW,UAAS,SAAAd,GAAK,MAAK,CAAEC,MAAO,EAAKD,MAAMC,MAAQ,Q,+BAI5C,IAAD,OAGP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,mBACA,kBAAC,EAAD,wGAKA,yBAAKf,UAAU,mBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACZiB,KAAKH,MAAMU,MAAMiB,KAAI,SAAAjB,GAAK,OACzB,kBAAC,EAAD,CACEE,GAAIF,EAAME,GACVgB,IAAKlB,EAAME,GACXxB,KAAMsB,EAAMtB,KACZE,MAAOoB,EAAMpB,MAEbuC,QAAS,EAAKN,2B,GA7DVf,c,MCJlBsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7ffad784.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Emojis(props) {\n  return (\n    <div className=\"img-container\">\n      <img className=\"emoji\" alt={props.name} src={props.image} />\n    </div>\n  );\n}\n\nexport default Emojis;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction SubTitle(props) {\n  return <h2 className=\"sub-title\">{props.children}</h2>;\n}\n\nexport default SubTitle;\n","import React from \"react\";\nimport Countdown from \"react-countdown-now\";\nimport \"./style.css\";\n\nconst Completionist = () => <span>Times Up!</span>;\n\nconst renderer = ({ seconds, completed }) => {\n  if (completed) {\n    // Render a completed state\n    return <Completionist />;\n  } else {\n    // Render a countdown\n    return <span>0:{seconds}</span>;\n  }\n};\n\n// By extending the React.Component class, Phoneinherits functionality from it\nclass Phone extends React.Component {\n  // Setting the initial state of the Phone\n  component;\n  state = {\n    count: 0,\n    clicked: false\n  };\n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className=\"card text-center smartphone\">\n        <div className=\"content\">\n          <div className=\"high-score\">High Score: {this.state.count}</div>\n          <div className=\"countdown\">\n            <Countdown date={Date.now() + 30000} renderer={renderer} />\n          </div>\n          <br />\n          <div className=\"speech-bubble\">Hi! How's it going?</div>\n          {/* <div className=\"reply-speech-bubble\">...</div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Phone;\n","import React, { Component } from \"react\";\nimport Emojis from \"./components/Emojis\";\nimport emoji from \"./emoji.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport SubTitle from \"./components/SubTitle\";\nimport Phone from \"./components/Phone\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.emoji to the emoji json array\n  state = {\n    emoji,\n    count: 0,\n    clicked: false\n  };\n\n  addToUsedEmojis = id => {\n    // Filter this.state.emoji for emoji with an id not equal to the id being removed\n    const emoji = this.state.emoji.filter(emoji => emoji.id !== id);\n    // Set this.state.emoji equal to the new emoji array\n    this.setState({ emoji });\n  };\n\n  shuffleEmojis = emoji => {\n    let i = emoji.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = emoji[i];\n      emoji[i] = emoji[j];\n      emoji[j] = temp;\n    }\n    return emoji;\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleIncrement = this.handleIncrement.bind(this);\n  }\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement() {\n    console.log(\"hello\");\n    // We always use the setState method to update a component's state\n    this.setState(state => ({ count: this.state.count + 1 }));\n  }\n\n  // Map over this.state.emoji and render a Emojis component for each emoji object\n  render() {\n    // const shuffledEmojis = shuffleEmojis(this.state.emoji);\n\n    return (\n      <Wrapper>\n        <Title>Emoji Game</Title>\n        <SubTitle>\n          You have 30 seconds to reply! Use as many emojis as you can without\n          using the same emoji twice!\n        </SubTitle>\n\n        <div className=\"phone-container\">\n          <Phone />\n        </div>\n        <div className=\"emoji-container\">\n          {this.state.emoji.map(emoji => (\n            <Emojis\n              id={emoji.id}\n              key={emoji.id}\n              name={emoji.name}\n              image={emoji.image}\n              // handleIncrement={this.handleIncrement}\n              onClick={this.handleIncrement}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}