{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/CardBody.js","components/Counter.js","App.js","index.js"],"names":["FriendCard","props","className","onClick","handleIncrement","alt","name","src","image","Wrapper","children","Title","CardBody","count","Counter","state","setState","this","React","Component","App","friends","removeFriend","id","filter","friend","map","key","ReactDOM","render","document","getElementById"],"mappings":"izBAaeA,MAVf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,OAAOC,QAASF,EAAMG,iBACnC,yBAAKF,UAAU,iBACb,yBAAKG,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,W,MCA1BC,MAJf,SAAiBR,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMS,W,MCG1BC,MAJf,SAAeV,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMS,WCevBE,MAdf,SAAkBX,GAChB,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,aAAb,UAAiCD,EAAMY,SCqB9BC,E,2MAvBbC,MAAQ,CACNF,MAAO,G,EAITT,gBAAkB,WAEhB,EAAKY,SAAS,CAAEH,MAAO,EAAKE,MAAMF,MAAQ,K,wEAK1C,OACE,yBAAKX,UAAU,oBACb,kBAAC,EAAD,CACEW,MAAOI,KAAKF,MAAMF,MAClBT,gBAAiBa,KAAKb,uB,GAlBVc,IAAMC,W,OCgDbC,E,2MA3CbL,MAAQ,CACNM,UACAR,MAAO,G,EAGTS,aAAe,SAAAC,GAEb,IAAMF,EAAU,EAAKN,MAAMM,QAAQG,QAAO,SAAAC,GAAM,OAAIA,EAAOF,KAAOA,KAElE,EAAKP,SAAS,CAAEK,a,EAIlBjB,gBAAkB,WAEhB,EAAKY,SAAS,CAAEH,MAAO,EAAKE,MAAMF,MAAQ,K,wEAIlC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,qBACA,kBAAC,EAAD,MAICI,KAAKF,MAAMM,QAAQK,KAAI,SAAAD,GAAM,OAC5B,kBAAC,EAAD,CACEH,aAAc,EAAKA,aACnBC,GAAIE,EAAOF,GACXI,IAAKF,EAAOF,GACZjB,KAAMmB,EAAOnB,KACbE,MAAOiB,EAAOjB,MACdJ,gBAAiB,EAAKA,gBACtBD,QAAS,EAAKC,0B,GArCRe,a,MCFlBS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.57c73efb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\" onClick={props.handleIncrement}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\n\n// If we want a child component to update or pass data to its parent, we can create a method inside the parent for the update\n// Then bind the method to the parent, and pass it to the child as a prop\n\nfunction CardBody(props) {\n  return (\n    <div className=\"card-body\">\n      <p className=\"card-text\">Count: {props.count}</p>\n      {/* <button className=\"btn btn-primary\" onClick={props.handleIncrement}>\n        Increment\n      </button>{\" \"}\n      <button className=\"btn btn-danger\" onClick={props.handleDecrement}>\n        Decrement\n      </button> */}\n    </div>\n  );\n}\n\nexport default CardBody;\n","import React from \"react\";\nimport CardBody from \"./CardBody\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Counter extends React.Component {\n  // Setting the initial state of the Counter component\n  state = {\n    count: 0\n  };\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className=\"card text-center\">\n        <CardBody\n          count={this.state.count}\n          handleIncrement={this.handleIncrement}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Counter from \"./components/Counter\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    count: 0\n  };\n\n  removeFriend = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const friends = this.state.friends.filter(friend => friend.id !== id);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends });\n  };\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Friends List</Title>\n        <Counter />\n        {/* <div className=\"card-body\">\n          <p className=\"card-text\">Count: {this.count}</p>\n        </div> */}\n        {this.state.friends.map(friend => (\n          <FriendCard\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            handleIncrement={this.handleIncrement}\n            onClick={this.handleIncrement}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}